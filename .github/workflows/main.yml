name: Main Kittygram workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r ./backend/requirements.txt 
          
      - name: Test with flake8 and django tests
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          python -m flake8 backend/
          cd backend/
          python manage.py test
          
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install
      
      - name: Run frontend tests
        run: |
          cd frontend
          npm test
          
  build_and_push:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: turbonyasha
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
      - name: Build and push backend image
        run: |
          docker build -t turbonyasha/kittygram_backend ./backend
          docker push turbonyasha/kittygram_backend
          
      - name: Build and push frontend image
        run: |
          docker build -t turbonyasha/kittygram_frontend ./frontend
          docker push turbonyasha/kittygram_frontend
          
      - name: Build and push gateway image
        run: |
          docker build -t turbonyasha/kittygram_gateway ./nginx
          docker push turbonyasha/kittygram_gateway
          
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Check the repository structure
        run: |
          echo "Current working directory: $(pwd)"
          ls -alh 
      - name: SSH into server and deploy
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "../docker-compose.yml"
          target: "/home/yc-user/kittygram"
      
      - name: Restart Docker containers using Docker Compose
        run: |
          ssh -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "cd /home/yc-user/kittygram && docker-compose up -d --build"
      
      - name: Run migrations and collect static files (if applicable)
        run: |
          ssh -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "cd /home/yc-user/kittygram/backend && docker-compose exec backend python manage.py migrate && docker-compose exec backend python manage.py collectstatic --noinput"

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Notify Telegram on success
        run: |
          curl -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="Задеплоили Киттиграм!"